#!/usr/bin/env expect
#==============================================================================
#
#          FILE:  rsync
#         USAGE:  ./rsync
#   DESCRIPTION:  Executes an rsync connection to a pre-defined server
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================

if { [ info exists env(ENABLE_VERBOSE) ] } {
    if { [ string match -nocase $env(ENABLE_VERBOSE) "true" ] == 1 } {
        log_user 1
    } else {
        log_user 0
    }
} else {
    log_user 0
}

if { [ info exists env(ENABLE_TRACE) ] } {
    if { [ string match -nocase $env(ENABLE_TRACE) "true" ] == 1 } {
        exp_internal 1
    }
}

log_file -a $env(HOME)/log/rsync.log

## set up some class info
global env
global _CNAME
global _METHOD_NAME
global _LINE_TERMINATOR

set _CNAME "rsync"
set _METHOD_NAME "rsync"
set _LINE_TERMINATOR "\r\n"
set USERNAME $env(LOGNAME);
set timeout -1
set AUTHFILE "file:/home/khuntly/etc/password.asc";

source [ file join [ file dirname [ info script ] ] misc.tcl ];
source [ file join [ file dirname [ info script ] ] security.tcl ];

proc usage {} {
    global _METHOD_NAME

    puts stderr "$_METHOD_NAME Perform an automated SCP-based task without user interaction.";
    puts stderr "Usage: $_METHOD_NAME \[ --hostname <hostname> \] \[ --username <user> \] \[ --cfgfile <config file> \] \[ --type <command> \] \[ --source <source> \] \[ --dest <destination> \] ( --timeout <timeout> )";
    puts stderr "\thost                The target hostname to connect to. The host must be either an IP address or resolvable hostname.";
    puts stderr "\tusername            The user to connect to the remote system as.";
    puts stderr "\tKey File            The SSH keyfile to utilize (optional)";
    puts stderr "\tConfigFile          The configuration file to utilize (optional).";
    puts stderr "\ttype                The transfer type to execute. One of 'local' or 'remote' is required."; ## _TYPE
    puts stderr "\tsrc                 The source path/file to operate against."; ## _SRC_FILE
    puts stderr "\tdst                 The target path/file to operate into."; ## _DST_FILE
    puts stderr "\ttimeout             A timeout value for the script to wait if it hangs. If not specified, a value of 10 seconds is used."; ## timeout

    exit 3;
}

# make sure we have all our arguments
if { [ expr { $argc < 4 } ] } {
    usage;
} else {
    # set runtime information
    for { set a 0 } { $a ne $argc } { incr a } {
        set PARM_NAME [ string toupper [ string range [ lindex $argv $a ] 2 [ string length [ lindex $argv $a ] ] ] ]
        set [ set PARM_NAME ] [ lindex [ split [ parseParams "[ lindex $argv $a ] [ lindex $argv [ expr "$a" + "1" ] ]" ] " " ] 1 ]

        incr a;
    }

    set _AUTH_DATA [ split [ getAuthValue $HOSTNAME $USERNAME $AUTHFILE gpg ] " " ];

    switch [ llength $_AUTH_DATA ] {
        1 {
            set _USER_PASSWD $_AUTH_DATA;
        }
        2 {
            set _USER_KEY [ lindex $_AUTH_DATA 0 ];
            set _USER_PASSWD [ lindex $_AUTH_DATA 1 ];
        }
    }
}

if { [ info exists CFGFILE ] } {
    set _RSYNC_COMMAND "rsync -qCcarulKHpEAgtSzihs -e \"ssh -qaCkT -E $env(HOME)/log/ssh.log -l $USERNAME -F $CFGFILE\" ";
    append _RSYNC_COMMAND "--temp-dir=/var/tmp --timeout=10 --no-motd --delete --delete-excluded --progress ";
    append _RSYNC_COMMAND "--exclude-from=$env(HOME)/etc/excludes --blocking-io --stats --progress --log-file=$env(HOME)/log/rsync.log ";
} else {
    set _RSYNC_COMMAND "rsync -qCcarulKHpEAgtSihs -e \"ssh -qaCkT -E $env(HOME)/log/ssh.log -l $USERNAME\" ";
    append _RSYNC_COMMAND "--temp-dir=/var/tmp --timeout=10 --no-motd --delete --delete-excluded --progress ";
    append _RSYNC_COMMAND "--exclude-from=$env(HOME)/etc/excludes --blocking-io --stats --progress --log-file=$env(HOME)/log/rsync.log ";
}

switch -nocase $TYPE {
    local {
        append _RSYNC_COMMAND " $SOURCE $HOSTNAME:$DEST";
    }
    remote {
        append _RSYNC_COMMAND " $HOSTNAME:$DEST $SOURCE";
    }
}

if { [ info exists _RSYNC_COMMAND ] } {
    eval spawn $_RSYNC_COMMAND;

    set i 0;

    expect {
        "*(yes/no)? " {
            exp_send "yes\r";

            exp_continue;
        }
        "*id_?sa*" {
            if { [ info exists _USER_PASSWD ] } {
                exp_send "$_USER_PASSWD";
            }

            exp_send "\r";

            exp_continue;
        }
        "*?assword:*" {
            if { [ expr { $i == 1 } ] } {
                puts stderr "An invalid password was provided for user account $USERNAME on host $HOSTNAME";

                exit 1;
            }

            set i [ expr { $i + 1 } ];

            exp_send "$_USER_PASSWD\r";

            exp_continue;
        }
        $_LINE_TERMINATOR {
            append output $expect_out(buffer); exp_continue;
        }
        eof {
            append output $expect_out(buffer);
        }
    }

    if { [ info exists output ] } {
        regsub -all -line {^[ \r\t]+|[ \r\t]+$} $output "" _RETURN_DATA;
        set _PRINT_DATA [ string trimright $_RETURN_DATA ];

        if { [ string compare -nocase $_PRINT_DATA "" ] != 0 } {
            if { [ string is integer $_PRINT_DATA ] } {
                exit $_PRINT_DATA;
            } else {
                puts $_PRINT_DATA;

                exit 0;
            }
        } else {
            exit 0;
        }
    }
} else {
    puts stderr "No valid SSH command was generated. Cannot continue.";

    exit 27;
}
