#!/usr/bin/env expect
#==============================================================================
#
#          FILE:  scp
#         USAGE:  ./scp
#   DESCRIPTION:  Executes an scp connection to a pre-defined server
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================

if { [ info exists env(ENABLE_VERBOSE) ] } {
    if { [ string match -nocase $env(ENABLE_VERBOSE) "true" ] == 1 } {
        log_user 1;
    } else {
        log_user 0;
    }
} else {
    log_user 0;
}

if { [ info exists env(ENABLE_TRACE) ] } {
    if { [ string match -nocase $env(ENABLE_TRACE) "true" ] == 1 } {
        exp_internal 1;
    }
}

log_file -a $env(HOME)/log/scp.log;

# set up some class info
global env;
global _CNAME;
global _METHOD_NAME;
global _LINE_TERMINATOR;

set i 0;
set _CNAME "scp";
set _METHOD_NAME "scp";
set _LINE_TERMINATOR "\r\n";
set USERNAME $env(LOGNAME);
set AUTHFILE "file:/home/khuntly/etc/password.asc";
set timeout -1; ## set an infinite timeout. user can override as necessary

if { [info exists env(THREAD_TIMEOUT)] } {
    set timeout $env(THREAD_TIMEOUT);
}

source [ file join [ file dirname [ info script ] ] misc.tcl ];
source [ file join [ file dirname [ info script ] ] security.tcl ];

proc usage {} {
    global _METHOD_NAME;

    puts stderr "$_METHOD_NAME Perform an automated SCP-based task without user interaction.";
    puts stderr "Usage: $_METHOD_NAME \[ --hostname <hostname> \] \[ --username <user> \] \[ --cfgfile <config file> \] \[ --type <command> \] \[ --source <source> \] \[ --dest <destination> \] ( --timeout <timeout> )";
    puts stderr "\thost                The target hostname to connect to. The host must be either an IP address or resolvable hostname.";
    puts stderr "\tusername            The user to connect to the remote system as.";
    puts stderr "\tKey File            The SSH keyfile to utilize (optional)";
    puts stderr "\tConfigFile          The configuration file to utilize (optional).";
    puts stderr "\ttype                The transfer type to execute. One of 'local' or 'remote' is required."; ## _TRANSFER_TYPE
    puts stderr "\tsrc                 The source path/file to operate against."; ## _SRC_FILE
    puts stderr "\tdst                 The target path/file to operate into."; ## _DST_FILE
    puts stderr "\ttimeout             A timeout value for the script to wait if it hangs. If not specified, a value of 10 seconds is used."; ## timeout

    exit 3;
}

## make sure we have all our arguments
if { [ expr { $argc < 2 } ] } {
    usage;
} else {
    for { set a 0 } { $a ne $argc } { incr a } {
        set PARM_NAME [ string toupper [ string range [ lindex $argv $a ] 2 [ string length [ lindex $argv $a ] ] ] ];
        set [ set PARM_NAME ] [ lindex $argv [ expr "$a" + "1" ] ];

        incr a;
    }

    source [ file join [ file dirname [ info script ] ] security.tcl ];

    set _AUTH_DATA [ split [ getAuthValue $HOSTNAME $USERNAME $AUTHFILE gpg ] " " ];

    switch [ llength $_AUTH_DATA ] {
        1 {
            set _USER_PASSWD $_AUTH_DATA;
        }
        2 {
            set _USER_KEY [ lindex $_AUTH_DATA 0 ];
            set _USER_PASSWD [ lindex $_AUTH_DATA 1 ];
        }
    }
}

switch [ string match -nocase $TYPE "local" ] {
    0 {
        if { [ info exists CFGILE ] } {
            set _SCP_CMD "scp -pqrC -F $CFGFILE $USERNAME@$HOSTNAME:$DEST $SOURCE";
        } else {
            set _SCP_CMD "scp -pqrC $USERNAME@$HOSTNAME:$DEST $SOURCE";
        }
    }
    1 {
        if { [ info exists CFGILE ] } {
            set _SCP_CMD "scp -pqrC -F $CFGFILE $SOURCE $USERNAME@$HOSTNAME:$DEST";
        } else {
            set _SCP_CMD "scp -pqrC $SOURCE $USERNAME@$HOSTNAME:$DEST";
        }
    }
    default {
        puts stderr "An invalid transfer type was provided.. Cannot continue.";

        exit 1;
    }
}

eval spawn $_SCP_CMD

expect {
    "*(yes/no)? " {
        exp_send "yes\r";

        exp_continue;
    }
    "*passphrase*" {
        if { [ info exists _USER_KEY ] } {
            exp_send "$_USER_PASSWD\r";

            exp_continue;
        }

        exp_send "\r";

        exp_continue;
    }
    "*WARNING: Your password has expired.*" {
        puts stderr "Password has expired for user $USERNAME on host $HOSTNAME";

        exit 1;
    }
    "*?assword:*" {
        if { [ expr { $i == 1 } ] } {
            puts stderr "An invalid password was provided for user account $USERNAME on host $HOSTNAME";

            exit 1;
        }

        set i [ expr { $i + 1 } ];

        exp_send "$_USER_PASSWD\r";

        exp_continue;
    }
    eof {
        catch wait _EXIT_CODE;

        append output $expect_out(buffer);
    }
}

if { [ info exists output ] } {
    regsub -all -line {^[ \r\t]+|[ \r\t]+$} $output "" _RETURN_DATA;
    set _PRINT_DATA [ string trimright $_RETURN_DATA ];

    if { [ string compare -nocase $_PRINT_DATA "" ] != 0 } {
        if { [ string is integer $_PRINT_DATA ] } {
            exit $_PRINT_DATA;
        } else {
            puts $_PRINT_DATA;

            exit 0;
        }
    } else {
        exit 0;
    }
} elseif { [ info exists result ] } {
    exit $_EXIT_CODE;
}
