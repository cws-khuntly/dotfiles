#!/usr/bin/env expect
#==============================================================================
#
#          FILE:  ssh
#         USAGE:  ./ssh
#   DESCRIPTION:  Executes an scp connection to a pre-defined server
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================
if { [ info exists env(ENABLE_VERBOSE) ] } {
    if { [ string match -nocase $env(ENABLE_VERBOSE) "true" ] == 1 } {
        log_user 1;
    } else {
        log_user 0;
    }
} else {
    log_user 0;
}

if { [ info exists env(ENABLE_TRACE) ] } {
    if { [ string match -nocase $env(ENABLE_TRACE) "true" ] == 1 } {
        exp_internal 1;
    }
}

log_file -a $env(HOME)/log/ssh.log;

## set up some class info
global env;
global _CNAME;
global _METHOD_NAME;
global _LINE_TERMINATOR;

set _CNAME "ssh";
set _METHOD_NAME "ssh";
set _LINE_TERMINATOR "\r\n";
set USERNAME $env(LOGNAME);
set timeout 10;

if { [info exists env(THREAD_TIMEOUT)] } {
    set timeout $env(THREAD_TIMEOUT);
}

source [ file join [ file dirname [ info script ] ] misc.tcl ];
source [ file join [ file dirname [ info script ] ] security.tcl ];

proc usage {} {
    global _METHOD_NAME;

    puts stderr "$_METHOD_NAME Perform an automated SSH-based task without user interaction.";
    puts stderr "Usage: $_METHOD_NAME \[ --hostname <hostname> \] \[ --username <user> \] \[ --auth <auth data> \] \[ --cfgfile <config file> \] \[ --exec <command> \] ( --timeout <timeout> )";
    puts stderr "\thost                The target hostname to connect to. The host must be either an IP address or resolvable hostname.";
    puts stderr "\tusername            The user to connect to the remote system as.";
    puts stderr "\tAuthentication      The authentication information to utilize";
    puts stderr "\tKey File            The SSH keyfile to utilize (optional)";
    puts stderr "\tConfigFile          The configuration file to utilize (optional).";
    puts stderr "\tcommand             The command to execute on the remote system. If an interactive shell is required, specify 'shell' here.";
    puts stderr "\ttimeout             A timeout value for the script to wait if it hangs. If not specified, a value of 10 seconds is used.";

    exit 3;
}

## make sure we have all our arguments
if { [ expr { $argc < 2 } ] } {
    usage;
} else {
    for { set a 0 } { $a ne $argc } { incr a } {
        set PARM_NAME [ string toupper [ string range [ lindex $argv $a ] 2 [ string length [ lindex $argv $a ] ] ] ];
        set [ set PARM_NAME ] [ lindex $argv [ expr "$a" + "1" ] ];

        incr a;
    }

    source [ file join [ file dirname [ info script ] ] security.tcl ];

    set _AUTH_DATA [ split [ getAuthValue $HOSTNAME $USERNAME ] " " ];

    switch [ llength $_AUTH_DATA ] {
        1 {
            set _USER_PASSWD $_AUTH_DATA;
        }
        2 {
            set _USER_KEY [ lindex $_AUTH_DATA 0 ];
            set _USER_PASSWD [ lindex $_AUTH_DATA 1 ];
        }
    }
}

if { [ info exists CFGFILE ] } {
    if { [ info exists EXEC ] } {
        if { [ string match -nocase $EXEC "shell" ] } {
            set _SSH_COMMAND "ssh -qaCktl $USERNAME -F $CFGFILE";
        } else {
            set _SSH_COMMAND "ssh -qaCktl $USERNAME -F $CFGFILE $HOSTNAME \"$EXEC\"";
        }
    } else {
        set _SSH_COMMAND "ssh -qaCktl $USERNAME $HOSTNAME screen -RR";
    }
} else {
    if { [ info exists EXEC ] } {
        if { [ string match -nocase $EXEC "shell" ] } {
            set _SSH_COMMAND "ssh -qaCktl $USERNAME $HOSTNAME";
        } else {
            set _SSH_COMMAND "ssh -qaCktl $USERNAME $HOSTNAME \"$EXEC\"";
        }
    } else {
        set _SSH_COMMAND "ssh -qaCktl $USERNAME $HOSTNAME screen -RR";
    }
}

if { [ info exists env(NEW_PASSWD_FILE) ] } {
    set _ENCRYPTED $env(ENCR_TYPE);
    set _CHANGE_DATA [ getAuthValue $HOSTNAME $USERNAME $env(NEW_PASSWD_FILE) ];
}

set i 0;

eval spawn $_SSH_COMMAND;

expect {
    "*(yes/no)? " {
        exp_send "yes\r";
        exp_continue;
    }
    "*id_?sa*" {
        if { [ info exists _USER_PASSWD ] } {
            exp_send "$_USER_PASSWD";
        }

        exp_send "\r";
        exp_continue;
    }
    "*Changing password for *$USERNAME*" {
        ## set up password change here
        if { [ info exists _CHANGE_DATA ] } {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "$_CHANGE_DATA" ];
        } else {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "" ];
        }

        switch $_RETURN_VALUE {
            1 - 2 - 3 {
                puts stderr "Unable to change password for provided user account $USERNAME on host $HOSTNAME";

                exit 0;
            }
            default {
                puts "$_RETURN_VALUE"
                puts "Password successfully changed for user $USERNAME to $_RETURN_VALUE on host $HOSTNAME";
            }
        }
    }
    "*Changing password for user *$USERNAME*" {
        ## set up password change here
        if { [ info exists _CHANGE_DATA ] } {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "$_CHANGE_DATA" ];
        } else {
            set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "" ];
        }

        switch $_RETURN_VALUE {
            1 - 2 - 3 {
                puts stderr "Unable to change password for provided user account $USERNAME on host $HOSTNAME";

                exit 0;
            }
            default {
                puts "$_RETURN_VALUE"
                puts "Password successfully changed for user $USERNAME to $_RETURN_VALUE on host $HOSTNAME";
            }
        }
    }
    "*?assword*" {
        if { [ expr { $i == 1 } ] } {
            puts stderr "An invalid password was provided for user account $USERNAME on host $HOSTNAME";

            exit 1;
        }

        set i [ expr { $i + 1 } ];

        exp_send "$_USER_PASSWD\r";
        exp_continue;
    }
    $_LINE_TERMINATOR {
        if { [ info exists EXEC ] } {
            if { [ string compare $EXEC "shell" ] != 0 } {
                append output $expect_out(buffer);
            }
        } else {
            expect {
                "*Changing password for *$USERNAME*" {
                    ## set up password change here
                    if { [ info exists _CHANGE_DATA ] } {
                        set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "$_CHANGE_DATA" ];
                    } else {
                        set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "" ];
                    }

                    switch $_RETURN_VALUE {
                        1 - 2 - 3 {
                            puts stderr "Unable to change password for provided user account $USERNAME on host $HOSTNAME";

                            exit 0;
                        }
                        default {
                            puts "$_RETURN_VALUE"
                            puts "Password successfully changed for user $USERNAME to $_RETURN_VALUE on host $HOSTNAME";
                        }
                    }
                }
                "*Changing password for user *$USERNAME*" {
                    ## set up password change here
                    if { [ info exists _CHANGE_DATA ] } {
                        set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "$_CHANGE_DATA" ];
                    } else {
                        set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "" ];
                    }

                    switch $_RETURN_VALUE {
                        1 - 2 - 3 {
                            puts stderr "Unable to change password for provided user account $USERNAME on host $HOSTNAME";

                            exit 0;
                        }
                        default {
                            puts "$_RETURN_VALUE"
                            puts "Password successfully changed for user $USERNAME to $_RETURN_VALUE on host $HOSTNAME";
                        }
                    }
                }
                "*?assword*" {
                    if { [ expr { $i == 1 } ] } {
                        puts stderr "An invalid password was provided for user account $USERNAME on host $HOSTNAME";

                        exit 1;
                    }

                    set i [ expr { $i + 1 } ];

                    exp_send "$_USER_PASSWD\r";
                    exp_continue;
                }
                $_LINE_TERMINATOR {
                    if { [ info exists EXEC ] } {
                        if { [ string compare $EXEC "shell" ] == 0 } {
                            interact;
                        } else {
                            if { [ string compare $EXEC "passwd" ] == 0 } {
                                if { [ info exists _CHANGE_DATA ] } {
                                    set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "$_CHANGE_DATA" ];
                                } else {
                                    set _RETURN_VALUE [ changeAccountPassword "account" "$USERNAME" "$_USER_PASSWD" "" ];
                                }

                                switch $_RETURN_VALUE {
                                    1 - 2 - 3 {
                                        puts stderr "Unable to change password for provided user account $USERNAME on host $HOSTNAME";

                                        exit 0;
                                    }
                                    default {
                                        puts "$_RETURN_VALUE"
                                        puts "Password successfully changed for user $USERNAME to $_RETURN_VALUE on host $HOSTNAME";
                                    }
                                }
                            } else {
                                exp_send "$EXEC\r";
                            }

                            append output $expect_out(buffer);

                            exp_continue;
                        }
                    } else {
                        interact;
                    }
                }
                eof {
                    append output $expect_out(buffer);
                }
            }
        }
    }
    eof {
        append output $expect_out(buffer);
    }
}

if { [ info exists output ] eq 1 } {
    regsub -all -line {^[ \r\t]+|[ \r\t]+$} $output "" _RETURN_DATA;
    set _PRINT_DATA [ string trimright $_RETURN_DATA ];

    if { [ string compare -nocase $_PRINT_DATA "" ] != 0 } {
        if { [ string is integer $_PRINT_DATA ] } {
            exit $_PRINT_DATA;
        } else {
            puts $_PRINT_DATA;

            exit 0;
        }
    } else {
        exit 0;
    }
}
