#!/usr/bin/env expect
#==============================================================================
#
#          FILE:  sudo
#         USAGE:  ./sudo
#   DESCRIPTION:  Executes an scp connection to a pre-defined server
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Kevin Huntly <kmhuntly@gmail.com>
#       COMPANY:  ---
#       VERSION:  1.0
#       CREATED:  ---
#      REVISION:  ---
#==============================================================================

if { [ info exists env(ENABLE_VERBOSE) ] } {
    if { [ string match -nocase $env(ENABLE_VERBOSE) "true" ] == 1 } {
        log_user 1
    } else {
        log_user 0
    }
} else {
    log_user 0
}

if { [ info exists env(ENABLE_TRACE) ] } {
    if { [ string match -nocase $env(ENABLE_TRACE) "true" ] == 1 } {
        exp_internal 1
    }
}

log_user 0
log_file -a $env(HOME)/log/sudo.log

## set up some class info
global env
global _CNAME
global _METHOD_NAME
global _LINE_TERMINATOR

set _CNAME "sudo"
set _METHOD_NAME "sudo"
set _LINE_TERMINATOR "\r\n"
set timeout 10

if { [info exists env(THREAD_TIMEOUT)] } {
    set timeout $env(THREAD_TIMEOUT)
}

source [ file join [ file dirname [ info script ] ] misc.tcl ];
source [ file join [ file dirname [ info script ] ] security.tcl ];

proc usage {} {
    global _METHOD_NAME

    puts stderr "$_METHOD_NAME Perform an automated sudo-based task without user interaction.";
    puts stderr "Usage: $_METHOD_NAME \[ command \] ( user ) ( authentication mechanism )";
    puts stderr "\tcommand             The sudo command to execute"
    puts stderr "\tuser                (Optional) The user to execute the sudo command as"
    puts stderr "\tauthentication      (Optional) Specify an authentication mechanism. One of 'pass', 'key', or 'file' can be provided in the following formats:"
    puts stderr "\t\t For password authentication: pass:the-password"
    puts stderr "\t\t For key-based authentication: key:/path/to/key. If a passphrase is required by the key, the syntax becomes key:/path/to/key:passphrase"
    puts stderr "\t\t To use a file containing the authentication information. The following syntaxes are available:"
    puts stderr "\t\t\t hostname:username:type:value(:value)"
    puts stderr "\t\t The same syntax rules as above apply here as well."
}

# make sure we have all our arguments
if { [ expr { $argc == 0 } ] } {
    usage

    exit 1
} else {
    # set runtime information
    set _COMMAND [ lindex $argv 0 ]

    # type it
    switch $argc {
        2 {
            switch [ llength [ split [ lindex $argv 1 ] ":" ] ] {
                1 {
                    set _USERNAME [ lindex $argv 1 ]
                }
                2 {
                    set _AUTH_STRING [ split [ lindex $argv 1 ] ":" ]

                    switch [ lindex $_AUTH_STRING 0 ] {
                        pass {
                            set _USER_PASSWD [ lindex $_AUTH_STRING 1 ]
                        }
                        file {
                            if { [ file exists [ lindex $_AUTH_STRING 1 ] ] == 1 } {
                                set _AUTH_FILE [ open [ lindex $_AUTH_STRING 1 ] r ]
                                fconfigure $_AUTH_FILE -buffering line

                                while { [ gets $_AUTH_FILE _ENTRY ] >= 0 } {
                                    if { [ string match "$$*" $_ENTRY ] || [ string match "$ #*" $_ENTRY ] } {
                                        # ignore by just going straight to the next loop iteration
                                        continue
                                    }

                                    set _USER_PASSWD $_ENTRY
                                }

                                close $_AUTH_FILE
                            }
                        }
                        default {
                            puts stderr "The provided authentication file either does not exist or cannot be read. Cannot continue."

                            exit 1
                        }
                    }
                }
            }
        }
        3 {
            set _USERNAME [ lindex $argv 1 ]
            set _AUTH_STRING [ split [ lindex $argv 2 ] ":" ]

            switch [ lindex $_AUTH_STRING 0 ] {
                pass {
                    set _USER_PASSWD [ lindex $_AUTH_STRING 1 ]
                }
                file {
                    if { [ file exists [ lindex $_AUTH_STRING 1 ] ] == 1 } {
                        set _AUTH_FILE [ open [ lindex $_AUTH_STRING 1 ] r ]
                        fconfigure $_AUTH_FILE -buffering line

                        while { [ gets $_AUTH_FILE _ENTRY ] >= 0 } {
                            if { [ string match "$$*" $_ENTRY ] || [ string match "$ #*" $_ENTRY ] } {
                                # ignore by just going straight to the next loop iteration
                                continue
                            }

                            set _USER_PASSWD $_ENTRY
                        }

                        close $_AUTH_FILE
                    }
                }
                default {
                    puts stderr "The provided authentication file either does not exist or cannot be read. Cannot continue."

                    exit 1
                }
            }
        }
    }

    if { [string compare -nocase [ lindex $argv 4 ] ""] != 0 } {
        set timeout [ lindex $argv 4 ]
    } else {
        set timeout 10
    }
}

if { ! [ info exists _USER_PASSWD ] } {
    puts stderr "No password was found. Cannot continue."
    exit 1
}

## spawn the ssh connection
if { [ info exists _COMMAND ] } {
    if { [ info exists _USERNAME ] } {
        eval spawn sudo -u $_USERNAME $_COMMAND
    } else {
        eval spawn sudo $_COMMAND
    }
} else {
    puts stderr "No valid command type was provided. Cannot continue."
    exit 27
}

expect {
    "*?assword*" {
        exp_send "$_USER_PASSWD\r"
        exp_continue
    }
    "*\$*" {
        switch [ string range $_COMMAND 0 1 ] {
            su {
                exp_send "\r"
                interact
            }
            default {
                append output $expect_out(buffer)
            }
        }
    }
    "*#" {
        append output $expect_out(buffer)
        exp_send "\r"
        interact
    }
    $_LINE_TERMINATOR {
        append output $expect_out(buffer);
        exp_continue
    }
    eof {
        append output $expect_out(buffer)
    }
}

if { [ info exists output ] } {
    regsub -all -line {^[ \r\t]+|[ \r\t]+$} $output "" _RETURN_DATA
    set _PRINT_DATA [ string trimright $_RETURN_DATA ]

    if { [ string compare -nocase $_PRINT_DATA "" ] != 0 } {
        if { [ string is integer $_PRINT_DATA ] } {
            exit $_PRINT_DATA
        } else {
            puts $_PRINT_DATA

            exit 0
        }
    } else {
        exit 0
    }
}
